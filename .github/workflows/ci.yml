name: CI/CD Pipeline for TDD

on:
  push:
    # すべてのブランチでのプッシュでCI実行（TDD開発のため）
  pull_request:
    branches: [ main ]

jobs:
  frontend-tests:
    name: Frontend Tests (TDD)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
        run_install: false
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(cd frontend && pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: |
        cd frontend
        pnpm install --frozen-lockfile
        
    - name: Run tests
      run: |
        cd frontend
        pnpm test:run --no-coverage --reporter=verbose --run
        
    - name: Run build check
      run: |
        cd frontend
        pnpm build

  backend-tests:
    name: Backend Tests (TDD)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        
    - name: Make gradlew executable
      run: |
        cd backend
        chmod +x ./gradlew
        
    - name: Run tests
      run: |
        cd backend
        ./gradlew test --info --stacktrace
        
    - name: Run build check
      run: |
        cd backend
        ./gradlew build --info
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: backend/build/reports/tests/test/

  tdd-status:
    name: TDD Status Check
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: always()
    
    steps:
    - name: TDD Status
      run: |
        echo "🔴 RED: テストが失敗している場合は、まずテストを通すコードを書きましょう"
        echo "🟢 GREEN: テストが通っている場合は、リファクタリングを検討しましょう"
        echo "🔵 REFACTOR: コードの品質を向上させ、次のRed-Greenサイクルへ"
        echo ""
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
